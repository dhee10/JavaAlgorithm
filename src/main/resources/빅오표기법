
# 점근표기볍 (asymptotic notation)
- 정수론과 해석학의 방법
- 어떤 함수가 증가하는 모습을 다른 함수와 비교
- 알고리즘의 복잡도를 논하거나 단순화 할 때 사용

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

# 컴퓨터 공학에서의 빅오 표기법
- 이름에서 알 수 있듯 대문자 O를 이용해 표기
- 주로 알고리즘을 분류하기 위해 사용
- O의 의미는 order of the funtion (대략 그 함수 정도)
    1. 알고리즘의 실행 시간을 일반화하여 표현해 쉽게 분류한다.
        실행시간 예시: T(n) = 5n² - 5n+ 3 (다항식) 일 때
        분류 예: O(n²) 알고리즘으로 분류
    실행 시간이 위와 같을 때 시간 증가에 가장 큰 영향을 미치는 항만 사용해 일반화 한다. (최고자항)
- 종류
    1. O(1): 입력 값이 바뀌어도 실행 속도 동일 (ex: y+x )
    2. O(n): 입력 값이 커지면 커질 수록 비례해 늘어난다. 정비례관계
            ( ex: 나열 된 수의 합 구하기 -  for (i =0 to N))
    3. O(n²): 제곱에 비례해 증가한다. 이중포문, 삽입정렬, 거품정렬 ,선택정렬 등
            (ex: 구구단 -  for(y=0 to n) { for(x=0 to n) { y * x } }
    4. O(nlog n): 1보다느리고 n보다 빠름 지수의 반대 , 한 번 진행 할 때 마다 절반 씩 줄여나감
                ( ex: 이진 탐색 트리 -  가운데 먼저 탐색 후 반절을 버리고 또 가운데 탐색)
    5. O(nlog n): n과 2ⁿ 사이의 속서 ( ex: 정렬알고리즘)


    . O표기법의 크기 비교
    작음 O(1) < O(log n) < O(n) < O(nlog n) < O(n²) <O(2ⁿ) < O(n!) 큼

# 어떤 기준으로 분류하는지?
- 입력 데이터가 많아짐에 따라 얼마나 늘어나는지 측정
    1. 시간복잡도: 실행 시간의 늘어남
    2. 공간복잡도: 필요한 공간의 늘어남


# 배열
- 평균
    검색: O(n) - 수를 찾을 때 제일 최선의 경우 한 번에 , 제일 최악의 경우 n번만에 찾는다 그러므로 평균 O(n)
    삽입: O(n) - 중간에 수를 삽입하게 될 경우 삽입 되는 수의 뒷 수들을 다 밀어야한다. 최선 안밀기 , 최악 n개 밀기
    삭제: O(n) - 중간에 수를 삭제하게 되면 뒷 수들을 끌어와야한다
    !단 순서가 상관 없다면 삽입 / 삭제에서 수를 맨 뒤로 보내고 하면 되기 때문에 프로그래밍 시에 O(1)만에 가능 하지만
    알고리즘에서 말하는 일반적인 상황은 아님.


