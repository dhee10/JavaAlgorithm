
# 정렬 알고리듬
1. 목록 안에 저장된 요소를 특정한 수선대로 재배치
2. 정렬을 하는 이유
    - 효율적 알고리듬 사용
    - 사람이 읽기 편하도록
    등
3. 입력 데이터는 일반적으로 배열 같은 데이터 구조에 저장
    - 아무 위치로의 임의 접근을 허용
    - 연결 리스트를 사용하면 처음 혹은 끝부터 차례로 훑어야 함
4. 흔히 사용하는 순서: 숫자 순서, 사전 순서
5. 정렬 방향: 오름차순, 내림차순
6. 다양한 정렬 알고리듬
    - 시간 복잡도차이
    - 메모리 사용량 차이
    - 안정성 차이
    - 직렬 vs 병렬 차이 (병렬-멀티스레드 관련)


# 정렬 알고리듬의 안정성
1. 안정성이란
    - 안전성(safety) 아님
    - 똑같은 키를 가진 데이터들의 순서가 바뀌지 않으냐 여부
    - 같은 키를 가진 데이터의 순서가 바뀌어도 문제가 아닌 경우가 보통이지만
    버그가 나는 경우가 있다.
    sort(); - 같은 키를 가진 데이터의 순서가 바뀔 수 있음
    stableSort(); - 같은 키를 가진 데이터의 순서 바뀌지 않음
2. 안정성이 문제가 되는 경우
    -정렬의 기준이 되는 정렬 키 (sort key)와 실제 데이터가 다름
     예시) 812384 -> 정렬 123488 (첫번째 8과 뒤에오는 8이 순서를 유지하며 바뀐다) 안정적 정렬
    -예시2)
    {age: 20, name:lulu},{age: 18, name:kak}, {age: 23, name:jin}, {age: 20, name:hoho} 를 나이에 따라 정렬 했을 때
    {age: 18, name:kak}, {age: 20, name:lulu}, {age: 20, name:hoho} {age: 23, name:jin} 안정적 정렬
    {age: 18, name:kak}, {age: 20, name:hoho}, {age: 20, name:lulu}, {age: 23, name:jin} 불안정적 정렬

# 대표적 정렬 알고리듬
    - 버블 정렬
    - 선택 정렬
    - 삽입 정렬
    - 퀵 정렬
    - 병합 정렬
    - 힙 정렬

# 정렬 알고리듬 비교 (이미지 : 정렬알고리듬 비교 참조)
    - 정렬알고리듬은 아무리 빨라도
        1) 모든 요소를 최소 한 번 씩은 방문해야함
        2) 배열의 모든 요소를 방문하는 것은 O(n)
        3) 따라서 아무리 빨라도 O(n)보다 느림
        4) 즉 아무리 빨라도 O(n log n)

    - 표를 보면 퀵 정렬의 최악이 O(^n)으로 병합과 힙 보다 느리지만
    메모리 사용량이 O(log n)으로 (스택 메모리를 사용) 병합보다 메모리 사용이 좋다.

# 상황에 따른 정렬 알고리듬 선택
<기본> 퀵 정렬
<간단하게 구현할 때> 버블 정렬
<어떤 경우에도 느려지면 안될 때> 병합 또는 힙 정렬